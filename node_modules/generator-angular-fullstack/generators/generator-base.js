'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.genBase = genBase;
exports.genNamedBase = genNamedBase;

var _util = require('util');

var _util2 = _interopRequireDefault(_util);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _underscore = require('underscore.string');

var _underscore2 = _interopRequireDefault(_underscore);

var _semver = require('semver');

var _semver2 = _interopRequireDefault(_semver);

var _yeomanWelcome = require('yeoman-welcome');

var _yeomanWelcome2 = _interopRequireDefault(_yeomanWelcome);

var _util3 = require('./util');

var genUtils = _interopRequireWildcard(_util3);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// extend lodash with underscore.string
_lodash2.default.mixin(_underscore2.default.exports());

function genBase(self) {
  self = self || this;

  var yoCheckPromise = void 0;
  if (!process.env.CI) {
    yoCheckPromise = genUtils.runCmd('yo --version').then(function (stdout) {
      if (!_semver2.default.satisfies(_semver2.default.clean(stdout), '>= 1.7.1')) {
        throw new Error('ERROR: You need to update yo to at least 1.7.1 (npm i -g yo)\n\'yo --version\' output: ' + stdout);
      }
    });
  } else {
    // CI won't have yo installed
    yoCheckPromise = Promise.resolve();
  }

  self.lodash = _lodash2.default;
  self.yoWelcome = _yeomanWelcome2.default;

  var baseDetermineAppname = self.determineAppname.bind(self);
  self.determineAppname = function () {
    if (self['name']) {
      return self['name'];
    } else {
      return baseDetermineAppname();
    }
  };

  self.appname = _lodash2.default.camelize(_lodash2.default.slugify(_lodash2.default.humanize(self.determineAppname())));
  self.scriptAppName = self.appname + genUtils.appSuffix(self);

  self.filters = self.filters || self.config.get('filters');

  // dynamic assertion statements
  self.expect = function () {
    return self.filters.expect ? 'expect(' : '';
  };
  self.to = function () {
    return self.filters.expect ? ').to' : '.should';
  };

  // dynamic relative require path
  self.relativeRequire = genUtils.relativeRequire.bind(self);
  // process template directory
  self.processDirectory = genUtils.processDirectory.bind(self);
  // rewrite a file in place
  self.rewriteFile = genUtils.rewriteFile;

  return yoCheckPromise;
}

function genNamedBase(self) {
  self = self || this;

  // extend genBase
  return genBase(self).then(function () {
    var name = self.name.replace(/\//g, '-');

    self.cameledName = _lodash2.default.camelize(name);
    self.classedName = _lodash2.default.classify(name);

    self.basename = _path2.default.basename(self.name);
    self.dirname = self.name.indexOf('/') >= 0 ? _path2.default.dirname(self.name) : self.name;
  });
}