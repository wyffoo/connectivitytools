'use strict';

var macro = function () {
  var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(t, command, endpoint) {
    var config;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (global.DEBUG) console.log(t.context.dir);

            if (!endpoint) {
              _context.next = 7;
              break;
            }

            _context.next = 4;
            return (0, _testHelpers.readJSON)(_path2.default.join(t.context.dir, '.yo-rc.json'));

          case 4:
            config = _context.sent;
            _context.next = 7;
            return (0, _testHelpers.runEndpointGenForked)('foo', { config: config['generator-angular-fullstack'] }, t.context.dir);

          case 7:
            if (!(typeof command === 'string')) {
              _context.next = 11;
              break;
            }

            return _context.abrupt('return', t.notThrows((0, _testHelpers.runCmd)(command, { cwd: t.context.dir })));

          case 11:
            return _context.abrupt('return', command(t));

          case 12:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function macro(_x, _x2, _x3) {
    return ref.apply(this, arguments);
  };
}();

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _yeomanTest = require('yeoman-test');

var _yeomanTest2 = _interopRequireDefault(_yeomanTest);

var _yeomanAssert = require('yeoman-assert');

var _yeomanAssert2 = _interopRequireDefault(_yeomanAssert);

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _getExpectedFiles = require('./get-expected-files');

var getExpectedFiles = _interopRequireWildcard(_getExpectedFiles);

var _testHelpers = require('./test-helpers');

require('should');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new _bluebird2.default(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return _bluebird2.default.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }

_bluebird2.default.promisifyAll(_fs2.default);


var defaultOptions = {
  buildtool: 'gulp',
  transpiler: 'babel',
  markup: 'html',
  stylesheet: 'sass',
  router: 'uirouter',
  testing: 'mocha',
  chai: 'expect',
  bootstrap: true,
  uibootstrap: true,
  odms: ['mongoose'],
  auth: true,
  oauth: [],
  socketio: true
};
var BASE_PORT = 9000;
var chdir = process.chdir;

var counter = 0;

macro.title = function (providedTitle, command, endpoint) {
  if (!providedTitle && typeof command === 'function') throw new Error('You need to provide a title for this test');

  var endpointText = endpoint ? '| Endpoint: ' + endpoint + ' ' : '';
  return ('app | default ' + endpointText + '| ' + (providedTitle || command)).trim();
};

_ava2.default.beforeEach('run the generator in a temp dir', function () {
  var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(t) {
    var dir;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            t.context.counter = counter++;
            t.context.devPort = BASE_PORT + t.context.counter * 10;
            t.context.debugPort = BASE_PORT + t.context.counter * 10 + 8;
            t.context.prodPort = BASE_PORT + t.context.counter * 10 + 9;
            t.context.name = 'default' + t.context.counter;
            t.context.options = {
              prompts: defaultOptions,
              options: {
                devPort: t.context.devPort,
                debugPort: t.context.debugPort,
                prodPort: t.context.prodPort,
                skipInstall: true
              }
            };

            _context2.next = 8;
            return (0, _testHelpers.runGenForked)(t.context.name, t.context.options);

          case 8:
            dir = _context2.sent;


            t.context.dir = dir;

          case 10:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  }));

  return function (_x4) {
    return ref.apply(this, arguments);
  };
}());

(0, _ava2.default)('generates the proper files', macro, function (t) {
  var expectedFiles = getExpectedFiles.app(defaultOptions);
  return t.notThrows((0, _testHelpers.assertOnlyFiles)(expectedFiles, _path2.default.normalize(t.context.dir)));
});
(0, _ava2.default)(macro, 'gulp jscs');
(0, _ava2.default)(macro, 'gulp lint:scripts');
(0, _ava2.default)(macro, 'gulp test:client');
_ava2.default.skip(macro, 'gulp test:server');

_ava2.default.skip(macro, 'gulp test:server', 'foo');
_ava2.default.skip(macro, 'gulp test:server', 'Foo');
_ava2.default.skip(macro, 'gulp test:server', 'foo/bar');
_ava2.default.skip(macro, 'gulp test:server', 'foo-bar');

if (!process.env.SKIP_E2E) {
  _ava2.default.skip(macro, 'gulp test:e2e');
  _ava2.default.skip(macro, 'gulp test:e2e:prod');
} else {
  _ava2.default.skip(macro, 'gulp test:e2e');
  _ava2.default.skip(macro, 'gulp test:e2e:prod');
}