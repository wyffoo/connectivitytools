'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.runCmd = runCmd;
exports.rewriteFile = rewriteFile;
exports.rewrite = rewrite;
exports.appSuffix = appSuffix;
exports.relativeRequire = relativeRequire;
exports.processDirectory = processDirectory;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _child_process = require('child_process');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DEBUG = !!process.env.DEBUG;

/**
 * @callback doneCallback
 * @param {null|Error} err
 */

/**
 * Run the given command in a child process
 * @param {string} cmd - command to run
 * @returns {Promise}
 */
function runCmd(cmd) {
  return new _bluebird2.default(function (resolve, reject) {
    (0, _child_process.exec)(cmd, {}, function (err, stdout, stderr) {
      if (err) {
        console.error(stdout);
        return reject(err);
      } else {
        if (DEBUG) console.log(cmd + ' stdout: ' + stdout);
        return resolve(stdout);
      }
    });
  });
}

function expandFiles(pattern, options) {
  options = options || {};
  var cwd = options.cwd || process.cwd();
  return _glob2.default.sync(pattern, options).filter(function (filepath) {
    return _fs2.default.statSync(_path2.default.join(cwd, filepath)).isFile();
  });
}

function rewriteFile(args) {
  args.path = args.path || process.cwd();
  var fullPath = _path2.default.join(args.path, args.file);

  args.haystack = _fs2.default.readFileSync(fullPath, 'utf8');
  var body = rewrite(args);

  _fs2.default.writeFileSync(fullPath, body);
}

function escapeRegExp(str) {
  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
}

function rewrite(args) {
  // check if splicable is already in the body text
  var re = new RegExp(args.splicable.map(function (line) {
    return '\s*' + escapeRegExp(line);
  }).join('\n'));

  if (re.test(args.haystack)) {
    return args.haystack;
  }

  var lines = args.haystack.split('\n');

  var otherwiseLineIndex = -1;
  lines.forEach(function (line, i) {
    if (line.indexOf(args.needle) !== -1) {
      otherwiseLineIndex = i;
    }
  });
  if (otherwiseLineIndex === -1) return lines.join('\n');

  var spaces = 0;
  while (lines[otherwiseLineIndex].charAt(spaces) === ' ') {
    spaces += 1;
  }

  var spaceStr = '';
  while ((spaces -= 1) >= 0) {
    spaceStr += ' ';
  }

  lines.splice(otherwiseLineIndex + 1, 0, args.splicable.map(function (line) {
    return spaceStr + line;
  }).join('\n'));

  return lines.join('\n');
}

function appSuffix(self) {
  var suffix = self.options['app-suffix'];
  return typeof suffix === 'string' ? self.lodash.classify(suffix) : '';
}

function relativeRequire(to, fr) {
  fr = this.destinationPath(fr || this.filePath);
  to = this.destinationPath(to);
  return _path2.default.relative(_path2.default.dirname(fr), to).replace(/\\/g, '/') // convert win32 separator to posix
  .replace(/^(?!\.\.)(.*)/, './$1') // prefix non parent path with ./
  .replace(/[\/\\]index\.js$/, ''); // strip index.js suffix from path
}

function filterFile(template) {
  // Find matches for parans
  var filterMatches = template.match(/\(([^)]+)\)/g);
  var filters = [];
  if (filterMatches) {
    filterMatches.forEach(function (filter) {
      filters.push(filter.replace('(', '').replace(')', ''));
      template = template.replace(filter, '');
    });
  }

  return { name: template, filters: filters };
}

function templateIsUsable(self, filteredFile) {
  var filters = self.filters || self.config.get('filters');
  var enabledFilters = [];
  for (var key in filters) {
    if (filters[key]) enabledFilters.push(key);
  }
  var matchedFilters = self.lodash.intersection(filteredFile.filters, enabledFilters);
  // check that all filters on file are matched
  if (filteredFile.filters.length && matchedFilters.length !== filteredFile.filters.length) {
    return false;
  }
  return true;
}

/**
 * 
 */
function processDirectory(source, destination) {
  var self = this;
  var root = _path2.default.isAbsolute(source) ? source : _path2.default.join(self.sourceRoot(), source);
  var files = expandFiles('**', { dot: true, cwd: root });
  var dest, src;

  files.forEach(function (f) {
    var filteredFile = filterFile(f);
    if (self.basename) {
      filteredFile.name = filteredFile.name.replace('basename', self.basename);
    }
    if (self.name) {
      filteredFile.name = filteredFile.name.replace('name', self.name);
    }
    var name = filteredFile.name;
    var copy = false,
        stripped;

    src = _path2.default.join(root, f);
    dest = _path2.default.join(destination, name);

    if (self.filters.ts && dest.indexOf('client') > -1 && dest.indexOf('.json') === -1) {
      dest = dest.replace('.js', '.ts');
    }

    if (_path2.default.basename(dest).indexOf('_') === 0) {
      stripped = _path2.default.basename(dest).replace(/^_/, '');
      dest = _path2.default.join(_path2.default.dirname(dest), stripped);
    }

    if (_path2.default.basename(dest).indexOf('!') === 0) {
      stripped = _path2.default.basename(dest).replace(/^!/, '');
      dest = _path2.default.join(_path2.default.dirname(dest), stripped);
      copy = true;
    }

    if (templateIsUsable(self, filteredFile)) {
      if (copy) {
        self.fs.copy(src, dest);
      } else {
        self.filePath = dest;
        self.fs.copyTpl(src, dest, self);
        delete self.filePath;
      }
    }
  });
}