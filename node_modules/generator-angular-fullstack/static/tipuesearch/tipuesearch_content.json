{"pages":[{"title":"Angular Full-Stack","text":"Documentation Home Generators Available generators: App angular-fullstack (aka angular-fullstack:app) Server Side angular-fullstack:endpoint Client Side (via generator-ng-component) angular-fullstack:route angular-fullstack:component angular-fullstack:controller angular-fullstack:filter angular-fullstack:directive angular-fullstack:service angular-fullstack:provider angular-fullstack:factory angular-fullstack:decorator Deployment angular-fullstack:openshift angular-fullstack:heroku Injection A gulp task looks for new SCSS\/LESS\/Stylus files in your client\/app and client\/components folder and automatically injects them into the main style file (ex client\/app\/app.scss) based on an injection block. Configuration Yeoman generated projects can be further tweaked according to your needs by modifying project files appropriately. A .yo-rc file is generated for helping you copy configuration across projects, and to allow you to keep track of your settings. You can change this as you see fit. Testing Running gulp test will run the client and server unit tests with karma and mocha. Use gulp test:server to only run server tests. Use gulp test:client to only run client tests. Protractor tests To setup protractor e2e tests, you must first run npm run update-webdriver Use gulp test:e2e to have protractor go through tests located in the e2e folder. Code Coverage Use gulp test:coverage to run mocha-istanbul and generate code coverage reports. coverage\/server will be populated with e2e and unit folders containing the lcov reports. The coverage taget has 3 available options: test:coverage:unit generate server unit test coverage test:coverage:e2e generate server e2e test coverage test:coverage:check combine the coverage reports and check against predefined thresholds when no option is given test:coverage runs all options in the above order Debugging Use gulp serve:debug for a more debugging-friendly environment. Environment Variables Keeping your app secrets and other sensitive information in source control isn't a good idea. To have gulp launch your app with specific environment variables, add them to the git ignored environment config file: server\/config\/local.env.js. Project Structure Overview \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 client \u00e2\u0094\u0082\u00c2\u00a0\u00c2\u00a0 \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 app - All of our app specific components go in here \u00e2\u0094\u0082\u00c2\u00a0\u00c2\u00a0 \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 assets - Custom assets: fonts, images, etc\u00e2\u0080\u00a6 \u00e2\u0094\u0082\u00c2\u00a0\u00c2\u00a0 \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 components - Our reusable components, non-specific to our app \u00e2\u0094\u0082 \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 e2e - Our protractor end to end tests \u00e2\u0094\u0082 \u00e2\u0094\u0094\u00e2\u0094\u0080\u00e2\u0094\u0080 server \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 api - Our apps server api \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 auth - For handling authentication with different auth strategies \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 components - Our reusable or app-wide components \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 config - Where we do the bulk of our apps configuration \u00e2\u0094\u0082 \u00e2\u0094\u0094\u00e2\u0094\u0080\u00e2\u0094\u0080 local.env.js - Keep our environment variables out of source control \u00e2\u0094\u0082\u00c2\u00a0\u00c2\u00a0 \u00e2\u0094\u0094\u00e2\u0094\u0080\u00e2\u0094\u0080 environment - Configuration specific to the node environment \u00e2\u0094\u0094\u00e2\u0094\u0080\u00e2\u0094\u0080 views - Server rendered views An example client component in client\/app main \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 main.js - Routes \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 main.controller.js - Controller for our main route \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 main.controller.spec.js - Test \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 main.html - View \u00e2\u0094\u0094\u00e2\u0094\u0080\u00e2\u0094\u0080 main.less - Styles An example server component in server\/api thing \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 index.js - Routes \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 thing.controller.js - Controller for our `thing` endpoint \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 thing.model.js - Database model \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080 thing.socket.js - Register socket events \u00e2\u0094\u0094\u00e2\u0094\u0080\u00e2\u0094\u0080 thing.spec.js - Test","tags":"","url":"index.html"},{"title":"Prerequisites","text":"Prerequisites npm modules Make sure you have all the required Node dependencies available: npm install -g yo gulp-cli generator-angular-fullstack MongoDB If you're using MongoDB (which you probably are), you'll have to install it from here. You should then run the mongod process, which is in &lt;install_path&gt;\/MongoDB\/Server\/&lt;version&gt;\/bin\/. You'll also want a \/data\/db folder somewhere for Mongo to put your database in. It would be wise to make a script to automate this command, and maybe even run this script on your computer's startup. Example: #!\/bin\/bash \/var\/lib\/mongo\/server\/3.2\/bin\/mongod --dbpath \/data\/db node-gyp node-gyp is a cross-platform command-line tool written in Node.js for compiling native addon modules for Node.js. You'll need it for things like brotli compression. Read through the Installation section of the node-gyp readme. Basically you'll need Python 2.7, make, and a C\/C++ compiler (like GCC on unix, Xcode on OS X, or Visual Studio tools on Windows). To tell npm to use Python 2.7 (if you also have a different version installed), run npm config set python \/path\/to\/executable\/python2.7. Here's a snapshot of the instructions from their readme: On Unix: python (v2.7 recommended, v3.x.x is not supported) make A proper C\/C++ compiler toolchain, like GCC On Mac OS X: python (v2.7 recommended, v3.x.x is not supported) (already installed on Mac OS X) Xcode You also need to install the Command Line Tools via Xcode. You can find this under the menu Xcode -&gt; Preferences -&gt; Downloads This step will install gcc and the related toolchain containing make On Windows: Option 1: Install all the required tools and configurations using Microsoft's windows-build-tools using npm install --global --production windows-build-tools from an elevated PowerShell or CMD.exe (run as Administrator). Option 2: Install tools and configuration manually: Visual C++ Build Environment: Option 1: Install Visual C++ Build Tools using the Default Install option. Option 2: Install Visual Studio 2015 (or modify an existing installation) and select Common Tools for Visual C++ during setup. This also works with the free Community and Express for Desktop editions. :bulb: [Windows Vista \/ 7 only] requires .NET Framework 4.5.1 Install Python 2.7 (v3.x.x is not supported), and run npm config set python python2.7 (or see below for further instructions on specifying the proper Python version and path.) Launch cmd, npm config set msvs_version 2015 If the above steps didn't work for you, please visit Microsoft's Node.js Guidelines for Windows for additional tips. Create a new folder for your project Make a new directory, and cd into it: mkdir myapp &amp;&amp; cd $_","tags":"","url":"Getting_Started\/Prerequisites.html"},{"title":"Installation","text":"Installation Run yo angular-fullstack (optionally passing an app name): yo angular-fullstack You'll then be asked a series of questions regarding options for the generated app. Such things include using JavaScript or TypeScript, HTML or Pug, Bootstrap, SQL, and so on. If you don't know what to answer for a question, or just want to use our preferred options, hitting ENTER will use the default options for that question, and move on to the next one. Once you've answered all the questions, a project will be scaffolded for you according to the options you entered. Then, npm dependencies will automatically be installed. Once that's all complete, you're ready to get started with your app!","tags":"","url":"Getting_Started\/Installation.html"},{"title":"Running Your New App","text":"Running Your New App You can start your new app by running gulp serve. This will do some preliminary things like clean out temporary files, lint your scripts, inject any new CSS files into your main one, apply environment variables, and download any new TypeScript definitions. It will then start up a new development server, which will kick off a Webpack build. it uses Browser Sync to facilitate front-end development. Your files will also be watched for changes. Any front-end changes will kick off another webpack build. Any back-end changes will restart the back-end server, cleaning the development database and re-seeding it as well. Once the serve tasks are complete, a browser tab should be opened to your new app server.","tags":"","url":"Getting_Started\/Running_Your_New_App.html"},{"title":"Project Overview","text":"Project Overview What follows is an overfiew of the files\/folders in your newly generated project. Project Root .babelrc \/\/ configuration for [Babel], a JavaScript transpiler .editorconfig \/\/ config file used to keep conistent file editing across text editors .eslintrc \/\/ all of the rules applying to the ESLint JavaScript linter .travis.yml \/\/ a sample configuration file for Travis CI .yo-rc.json \/\/ a configuration file for the Angular Full-Stack Generator gulpfile.babel.js \/\/ Gulp task runner file karma.conf.js \/\/ Karma browser testing configuration mocha.conf.js \/\/ Mocha test framework configuration mocha.global.js \/\/ teardown file for Mocha package.json \/\/ npm manifest, contains information for all project dependencies protractor.conf.js \/\/ configuration for Protractor e2e test framework README.md \/\/ a readme file generator based on your options, for your scaffolded project spec.js \/\/ test file for Webpack used by Karma webpack.make.js \/\/ main file for Webpack configuration \/\/The following export the config from `webpack.make.js` for their respective build targets: webpack.dev.js webpack.test.js webpack.build.js client\/ \u00e2\u0094\u0082 .eslintrc \/\/ eslint config for client files \u00e2\u0094\u0082 polyfills.js \/\/ imports of polyfills \u00e2\u0094\u0082 _index.html \/\/ template for the root HTML file of your app \u00e2\u0094\u0082 \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080app \u00e2\u0094\u0082 \u00e2\u0094\u0082 app.config.js \/\/ contains app-wide configuration code \u00e2\u0094\u0082 \u00e2\u0094\u0082 app.constants.js \/\/ gets injected with constants from `server\/config\/environment\/shared.js` \u00e2\u0094\u0082 \u00e2\u0094\u0082 app.{js,ts} \/\/ root JavaScript file of your app \u00e2\u0094\u0082 \u00e2\u0094\u0082 app.{css,scss,stylus,less} \/\/ root CSS file of your app \u00e2\u0094\u0082 \u00e2\u0094\u0082 \u00e2\u0094\u0082 \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080account \/\/ pages related to login \/ signup \/ user settings \u00e2\u0094\u0082 \u00e2\u0094\u0082 \u00e2\u0094\u0082 account.routes.js \/\/ route information \u00e2\u0094\u0082 \u00e2\u0094\u0082 \u00e2\u0094\u0082 index.js \/\/ account module root \u00e2\u0094\u0082 \u00e2\u0094\u0082 \u00e2\u0094\u0082 \u00e2\u0094\u0082 \u00e2\u0094\u0082 \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080login \u00e2\u0094\u0082 \u00e2\u0094\u0082 \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080settings \u00e2\u0094\u0082 \u00e2\u0094\u0082 \u00e2\u0094\u0094\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080signup \u00e2\u0094\u0082 \u00e2\u0094\u0082 \u00e2\u0094\u0082 \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080admin \/\/ site admin page \u00e2\u0094\u0082 \u00e2\u0094\u0082 \u00e2\u0094\u0082 \u00e2\u0094\u0094\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080main \/\/ main component, homepage \u00e2\u0094\u0082 \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080assets \/\/ where static assets are stored \u00e2\u0094\u0082 \u00e2\u0094\u0094\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080components \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080auth \u00e2\u0094\u0082 auth.module.js \/\/ module containing auth components \u00e2\u0094\u0082 auth.service.js \/\/ authentication service \u00e2\u0094\u0082 interceptor.service.js \/\/ intercepts requests and adds tokens if needed. Also redirects 401s to the login page. \u00e2\u0094\u0082 router.decorator.js \/\/ facilitates auth-based routing configuration \u00e2\u0094\u0082 user.service.js \/\/ user resource service \u00e2\u0094\u0082 \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080footer \u00e2\u0094\u0082 \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080modal \u00e2\u0094\u0082 \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080navbar \u00e2\u0094\u0082 \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080oauth-buttons \/\/ buttons for oauth login on signup \/ login pages \u00e2\u0094\u0082 \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080socket \u00e2\u0094\u0082 socket.mock.js \/\/ mock service for unit testing \u00e2\u0094\u0082 socket.service.js \/\/ service for Socket IO integration \u00e2\u0094\u0082 \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080ui-router \u00e2\u0094\u0082 ui-router.mock.js \/\/ mock service for unit testing \u00e2\u0094\u0082 \u00e2\u0094\u0094\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080util \/\/ general utility service server\/ \u00e2\u0094\u0082 .eslintrc \/\/ server-specific ESLint config, imports rules from root file \u00e2\u0094\u0082 app.js \/\/ root server module \u00e2\u0094\u0082 index.js \/\/ imports `app.js`. Enables Babel require hook when in development mode. \u00e2\u0094\u0082 routes.js \/\/ imports \/ config for server endpoints \u00e2\u0094\u0082 \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080api \u00e2\u0094\u0082 \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080thing \u00e2\u0094\u0082 \u00e2\u0094\u0082 index.js \/\/ root module \u00e2\u0094\u0082 \u00e2\u0094\u0082 index.spec.js \/\/ root module tests \u00e2\u0094\u0082 \u00e2\u0094\u0082 thing.controller.js \/\/ endpoint logic \u00e2\u0094\u0082 \u00e2\u0094\u0082 thing.events.js \/\/ endpoint events (save, delete, etc) logic \u00e2\u0094\u0082 \u00e2\u0094\u0082 thing.integration.js \/\/ integration tests \u00e2\u0094\u0082 \u00e2\u0094\u0082 thing.model.js \/\/ Mongoose \/ Sequelize data model \u00e2\u0094\u0082 \u00e2\u0094\u0082 thing.socket.js \/\/ Socket IO logic \/ config \u00e2\u0094\u0082 \u00e2\u0094\u0082 \u00e2\u0094\u0082 \u00e2\u0094\u0094\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080user \/\/ API for Users \u00e2\u0094\u0082 \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080auth \u00e2\u0094\u0082 \u00e2\u0094\u0082 auth.service.js \u00e2\u0094\u0082 \u00e2\u0094\u0082 index.js \/\/ imports local\/oauth auth modules \u00e2\u0094\u0082 \u00e2\u0094\u0082 \u00e2\u0094\u0082 \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080local \/\/ regular auth, signed up directly via your site \u00e2\u0094\u0082 \u00e2\u0094\u009c\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080google \/\/ Google OAuth \u00e2\u0094\u0082 \u00e2\u0094\u0094\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080&lt;etc...&gt; \u00e2\u0094\u0082 \u00e2\u0094\u0094\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080config \u00e2\u0094\u0082 express.js \/\/ Express server setup \u00e2\u0094\u0082 local.env.js \/\/ ignored by Git \u00e2\u0094\u0082 local.env.sample.js \/\/ sensitive environment variables are stored here, and added at server start. Copy to `local.env.js`. \u00e2\u0094\u0082 seed.js \/\/ re-seeds database with fresh data \u00e2\u0094\u0082 socketio.js \/\/ Socket IO configuration \/ imports \u00e2\u0094\u0082 \u00e2\u0094\u0094\u00e2\u0094\u0080\u00e2\u0094\u0080\u00e2\u0094\u0080environment development.js index.js production.js shared.js \/\/ config constants shared with the client code test.js e2e\/ End-To-End testing files (use by Protractor with Mocha)","tags":"","url":"Getting_Started\/Project_Overview.html"},{"title":"title","text":"[STUB]","tags":"","url":"Developing\/title.html"},{"title":"title","text":"[STUB]","tags":"","url":"Deployment\/title.html"},{"title":"title","text":"Contributing Releasing a new version Bump package.json version [ grunt conventionalChangelog cd angular-fullstack-deps git checkout master git pull cd .. gulp updateFixtures:deps cd angular-fullstack-deps git add . git commit -m $VERSION git push # npm publish ] git add .\/{CHANGELOG.md,angular-fullstack-deps,package.json} git commit -m $VERSION git push # npm publish","tags":"","url":"Contributing\/title.html"},{"title":"title","text":"[STUB]","tags":"","url":"Examples\/title.html"},{"title":"Heroku Deployment","text":"After you have generated the app, go to heroku.com and create and application manually (ex. foo-bar-42424). Then, starting frome the root folder, run the following commands: grunt build `cd dist heroku login (if you are not already authenticated) heroku git:remote -a foo-bar-42424 cd .. grunt build (not sure if this one is necessary) grunt buildcontrol:heroku -- @flaurian via #1966","tags":"","url":"Examples\/Heroku_Deployment.html"},{"title":"IIS","text":"Angular Full-Stack Generator deployment on Windows This is a walk through to get generator-angular-fullstack up and running on a windows machine. This walk through has been tested on: Windows Vista Windows 7 Windows 8 Windows Server 2008 (all builds\/ updates) Windows Server 2012 (all builds\/ updates) Prerequisites Install Python Download Python 2.7 from python.org\/downloads Install to C:\\Python27 (The Default Path) ** After Python is installed add the path (C:\\Python27\\) to your Windows PATH environment variable. Start &gt; Type Environment Variables &gt; click &quot;Edit the System Environment Variables&quot; &gt; Envrionment Variables &gt; Click &quot;Path&quot; &gt; &quot;Edit&quot; Add C:\\Python27\\python.exe to the very end. (Click into box and press 'End') Install NodeJS on Windows Download &amp; Install nvm-windows. Run nvm install 6.4.0 for the version of node that you want Run nvm use 6.4.0 to use that version Install IISNode Install Latest Stable release of IISNode Install IIS URL-Rewrite Module Install the URL-Rewrite Module extension Install MongoDB on Windows Download the current stable release of MongoDB from https:\/\/www.mongodb.org\/downloads and install using the &quot;Complete&quot; setup type and all the default options. Create the MongoDB data directory Create an empty folder at ex. C:\\data\\db. MongoDB requires a directory for storing all of it's data. The default directory is C:\\data\\db. You can use a different directory if you prefer by specifying the &quot;--dbpath&quot; parameter when starting the MongoDB server (below). Start the MongoDB server daemon by running mongod.exe from the command line. mongod.exe is likely located in C:\\Program Files\\MongoDB\\Server\\[MONGODB VERSION]\\bin; for example for version 3.2 the following command will start MongoDB: C:\\Program Files\\MongoDB\\Server\\3.2\\bin\\mongod Getting your project started Install the generator Create an empty folder for your project Open a terminal and change directories to your app's directory cd c:\\example Run npm install -g yo gulp-cli generator-angular-fullstack Run yo angular-fullstack Move App into production The below steps assume you have purchased a domain and have pointed your DNS to your public IP Build and prep Run the build process gulp serve:dist Move your dist\/ folder to your desired directory (This is where IIS will be pointed at) Copy the contents of the server\/ folder into your client\/ folder Copy down the web.config from below and place this inside your 'client' folder (save it as 'web.config') &lt;configuration&gt; &lt;system.webServer&gt; &lt;!-- indicates that the socketio.js file is a node.js application to be handled by the iisnode module --&gt; &lt;handlers&gt; &lt;add name=&quot;iisnode&quot; path=&quot;app.js&quot; verb=&quot;*&quot; modules=&quot;iisnode&quot; \/&gt; &lt;add name=&quot;iisnode-socketio&quot; path=&quot;config\/socketio.js&quot; verb=&quot;*&quot; modules=&quot;iisnode&quot; \/&gt; &lt;\/handlers&gt; &lt;iisnode node_env=&quot;PRODUCTION&quot; nodeProcessCountPerApplication=&quot;1&quot; maxConcurrentRequestsPerProcess=&quot;1024&quot; maxNamedPipeConnectionRetry=&quot;100&quot; namedPipeConnectionRetryDelay=&quot;250&quot; maxNamedPipeConnectionPoolSize=&quot;512&quot; maxNamedPipePooledConnectionAge=&quot;30000&quot; asyncCompletionThreadCount=&quot;0&quot; initialRequestBufferSize=&quot;4096&quot; maxRequestBufferSize=&quot;65536&quot; uncFileChangesPollingInterval=&quot;5000&quot; gracefulShutdownTimeout=&quot;60000&quot; loggingEnabled=&quot;true&quot; logDirectory=&quot;iisnode&quot; debuggingEnabled=&quot;true&quot; debugHeaderEnabled=&quot;false&quot; debuggerPortRange=&quot;5058-6058&quot; debuggerPathSegment=&quot;debug&quot; maxLogFileSizeInKB=&quot;128&quot; maxTotalLogFileSizeInKB=&quot;1024&quot; maxLogFiles=&quot;20&quot; devErrorsEnabled=&quot;true&quot; flushResponse=&quot;false&quot; enableXFF=&quot;false&quot; promoteServerVars=&quot;&quot; configOverrides=&quot;iisnode.yml&quot; watchedFiles=&quot;web.config;*.js&quot; \/&gt; &lt;!-- indicate that all strafic the URL paths beginning with 'socket.io' should be redirected to the server socketio.js, node.js, application to avoid IIS attempting to serve that content using other handlers (e.g. static file handlers) --&gt; &lt;rewrite&gt; &lt;rules&gt; &lt;rule name=&quot;LogFile&quot; patternSyntax=&quot;ECMAScript&quot;&gt; &lt;match url=&quot;socket.io&quot;\/&gt; &lt;action type=&quot;Rewrite&quot; url=&quot;app.js&quot;\/&gt; &lt;\/rule&gt; &lt;rule name=&quot;DynamicContent&quot;&gt; &lt;conditions&gt; &lt;add input=&quot;{REQUEST_FILENAME}&quot; matchType=&quot;IsFile&quot; negate=&quot;True&quot;\/&gt; &lt;\/conditions&gt; &lt;action type=&quot;Rewrite&quot; url=&quot;app.js&quot;\/&gt; &lt;\/rule&gt; &lt;\/rules&gt; &lt;\/rewrite&gt; &lt;!-- disable the IIS websocket module to allow node.js to provide its own WebSocket implementation --&gt; &lt;webSocket enabled=&quot;false&quot; \/&gt; &lt;\/system.webServer&gt; &lt;\/configuration&gt; Setup IIS Open IIS Manager (Start &gt; Type 'IIS Manager') Create your new site (Expand Server &gt; Right click sites &gt; 'Add Websites') Enter your site's name Enter the directory path to your client\/ folder (C:\\example\\dist\\client\\) Enter your hostname (Your a-record) Leave all other defaults and click 'Ok' Start your server Run gulp serve:dist Congratulations, you did it! Now go code something awesome!","tags":"","url":"Examples\/IIS.html"},{"title":"Modal","text":"[stub]","tags":"","url":"Examples\/Modal.html"},{"title":"app","text":"App Sets up a new AngularJS + Express app, generating all the boilerplate you need to get started. Usage: Usage: yo angular-fullstack:app [options] [&lt;name&gt;] Options: -h, --help # Print the generator's options and usage --skip-cache # Do not remember prompt answers Default: false --skip-install # Do not install dependencies Default: false --app-suffix # Allow a custom suffix to be added to the module name Default: App --dev-port # Port to use for the development HTTP server Default: 9000 --debug-port # Port to use for the server debugger Default: 5858 --prod-port # Port to use for the production HTTP Server Default: 8080 Arguments: name Type: String Required: false","tags":"","url":"Generators\/app.html"},{"title":"component","text":"Component Generates an Angular 1.5 component. Example: yo angular-fullstack:component name [?] Where would you like to create this component? client\/app\/ Produces: client\/app\/name\/name.component.js client\/app\/name\/name.component.spec.js","tags":"","url":"Generators\/component.html"},{"title":"controller","text":"Controller Generates a controller. Example: yo angular-fullstack:controller user [?] Where would you like to create this controller? client\/app\/ Produces: client\/app\/user\/user.controller.js client\/app\/user\/user.controller.spec.js","tags":"","url":"Generators\/controller.html"},{"title":"decorator","text":"Decorator Generates an AngularJS service decorator. Example: yo angular-fullstack:decorator serviceName [?] Where would you like to create this decorator? client\/app\/ Produces client\/app\/serviceName\/serviceName.decorator.js","tags":"","url":"Generators\/decorator.html"},{"title":"directive","text":"Directive Generates a directive. Example: yo angular-fullstack:directive myDirective [?] Where would you like to create this directive? client\/app\/ [?] Does this directive need an external html file? Yes Produces: client\/app\/myDirective\/myDirective.directive.js client\/app\/myDirective\/myDirective.directive.spec.js client\/app\/myDirective\/myDirective.html client\/app\/myDirective\/myDirective.scss Simple directive without an html file Example: yo angular-fullstack:directive simple [?] Where would you like to create this directive? client\/app\/ [?] Does this directive need an external html file? No Produces: client\/app\/simple\/simple.directive.js client\/app\/simple\/simple.directive.spec.js","tags":"","url":"Generators\/directive.html"},{"title":"endpoint","text":"Endpoint Generates a new API endpoint. Usage: Usage: yo angular-fullstack:endpoint [options] &lt;name&gt; Options: -h, --help # Print the generator's options and usage --skip-cache # Do not remember prompt answers Default: false --route # URL for the endpoint --models # Specify which model(s) to use Options: mongoose, sequelize --endpointDirectory # Parent directory for enpoints Arguments: name Type: String Required: true Example: yo angular-fullstack:endpoint message [?] What will the url of your endpoint be? \/api\/messages Produces: server\/api\/message\/index.js server\/api\/message\/index.spec.js server\/api\/message\/message.controller.js server\/api\/message\/message.integration.js server\/api\/message\/message.model.js (optional) server\/api\/message\/message.events.js (optional) server\/api\/message\/message.socket.js (optional)","tags":"","url":"Generators\/endpoint.html"},{"title":"filter","text":"Filter Generates a filter. Example: yo angular-fullstack:filter myFilter [?] Where would you like to create this filter? client\/app\/ Produces: client\/app\/myFilter\/myFilter.filter.js client\/app\/myFilter\/myFilter.filter.spec.js","tags":"","url":"Generators\/filter.html"},{"title":"heroku","text":"Heroku Deploying to heroku only takes a few steps. yo angular-fullstack:heroku To work with your new heroku app using the command line, you will need to run any heroku commands from the dist folder. If you're using mongoDB you will need to add a database to your app: heroku addons:create mongolab Note: if you get an Error: No valid replicaset instance servers found you need to modify moongose connection options in config\/environment\/production.js as follows: options: { db: { safe: true, replset: { socketOptions: { keepAlive: 1, connectTimeoutMS: 30000 } }, server: { socketOptions: { keepAlive: 1, connectTimeoutMS: 30000 } } } } One of the odd things about the Node driver is that the default timeout for replica set connections is only 1 second, so make sure you're setting it to something more like 30s like in this example. Your app should now be live. To view it run heroku open. If you're using any oAuth strategies, you must set environment variables for your selected oAuth. For example, if we're using Facebook oAuth we would do this : heroku config:set FACEBOOK_ID=id heroku config:set FACEBOOK_SECRET=secret You will also need to set DOMAIN environment variable: heroku config:set DOMAIN=&lt;your-heroku-app-name&gt;.herokuapp.com # or (if you're using it): heroku config:set DOMAIN=&lt;your-custom-domain&gt; To make your deployment process easier consider using grunt-build-control. Pushing Updates gulp build Commit and push the resulting build, located in your dist folder: gulp buildcontrol:heroku","tags":"","url":"Generators\/heroku.html"},{"title":"openshift","text":"###Openshift Note: Openshift uses a quite old version of Node by default. We strongly recommend updating your Node version. Here's a helpful article. Deploying to OpenShift can be done in just a few steps: yo angular-fullstack:openshift A live application URL will be available in the output. oAuth If you're using any oAuth strategies, you must set environment variables for your selected oAuth. For example, if we're using Facebook oAuth we would do this : rhc set-env FACEBOOK_ID=id -a my-openshift-app rhc set-env FACEBOOK_SECRET=secret -a my-openshift-app You will also need to set DOMAIN environment variable: rhc set-env DOMAIN=&lt;your-openshift-app-name&gt;.rhcloud.com # or (if you're using it): rhc set-env DOMAIN=&lt;your-custom-domain&gt; After you've set the required environment variables, restart the server: rhc app-restart -a my-openshift-app To make your deployment process easier consider using grunt-build-control. Pushing Updates gulp build Commit and push the resulting build, located in your dist folder: gulp buildcontrol:openshift","tags":"","url":"Generators\/openshift.html"},{"title":"route","text":"Route Generates a new route. Example: yo angular-fullstack:route myroute [?] What module name would you like to use? myApp [?] Where would you like to create this route? client\/app\/ [?] What will the url of your route be? \/myroute Produces: client\/app\/myroute\/myroute.js client\/app\/myroute\/myroute.controller.js client\/app\/myroute\/myroute.controller.spec.js client\/app\/myroute\/myroute.html client\/app\/myroute\/myroute.scss","tags":"","url":"Generators\/route.html"},{"title":"service","text":"Service Generates an AngularJS service. Example: yo angular-fullstack:service myService [?] Where would you like to create this service? client\/app\/ Produces: client\/app\/myService\/myService.service.js client\/app\/myService\/myService.service.spec.js You can also do yo angular-fullstack:factory and yo angular-fullstack:provider for other types of services.","tags":"","url":"Generators\/service.html"}]}